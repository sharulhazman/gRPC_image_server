// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image.proto

#include "image.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR NLImage::NLImage(
    ::_pbi::ConstantInitialized)
  : data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , color_(0)
  , width_(0)
  , height_(0){}
struct NLImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NLImageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NLImageDefaultTypeInternal() {}
  union {
    NLImage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NLImageDefaultTypeInternal _NLImage_default_instance_;
PROTOBUF_CONSTEXPR NLImageRotateRequest::NLImageRotateRequest(
    ::_pbi::ConstantInitialized)
  : image_(nullptr)
  , rotation_(0)
{}
struct NLImageRotateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NLImageRotateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NLImageRotateRequestDefaultTypeInternal() {}
  union {
    NLImageRotateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NLImageRotateRequestDefaultTypeInternal _NLImageRotateRequest_default_instance_;
PROTOBUF_CONSTEXPR NLCustomImageEndpointRequest::NLCustomImageEndpointRequest(
    ::_pbi::ConstantInitialized)
  : image_(nullptr){}
struct NLCustomImageEndpointRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NLCustomImageEndpointRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NLCustomImageEndpointRequestDefaultTypeInternal() {}
  union {
    NLCustomImageEndpointRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NLCustomImageEndpointRequestDefaultTypeInternal _NLCustomImageEndpointRequest_default_instance_;
PROTOBUF_CONSTEXPR NLBlurImageEndpointRequest::NLBlurImageEndpointRequest(
    ::_pbi::ConstantInitialized)
  : image_(nullptr)
  , kernel_(0){}
struct NLBlurImageEndpointRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NLBlurImageEndpointRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NLBlurImageEndpointRequestDefaultTypeInternal() {}
  union {
    NLBlurImageEndpointRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NLBlurImageEndpointRequestDefaultTypeInternal _NLBlurImageEndpointRequest_default_instance_;
PROTOBUF_CONSTEXPR NLCustomImageEndpointResponse::NLCustomImageEndpointResponse(
    ::_pbi::ConstantInitialized)
  : image_(nullptr){}
struct NLCustomImageEndpointResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NLCustomImageEndpointResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NLCustomImageEndpointResponseDefaultTypeInternal() {}
  union {
    NLCustomImageEndpointResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NLCustomImageEndpointResponseDefaultTypeInternal _NLCustomImageEndpointResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_image_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_image_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_image_2eproto = nullptr;

const uint32_t TableStruct_image_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NLImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NLImage, color_),
  PROTOBUF_FIELD_OFFSET(::NLImage, data_),
  PROTOBUF_FIELD_OFFSET(::NLImage, width_),
  PROTOBUF_FIELD_OFFSET(::NLImage, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NLImageRotateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NLImageRotateRequest, rotation_),
  PROTOBUF_FIELD_OFFSET(::NLImageRotateRequest, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NLCustomImageEndpointRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NLCustomImageEndpointRequest, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NLBlurImageEndpointRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NLBlurImageEndpointRequest, image_),
  PROTOBUF_FIELD_OFFSET(::NLBlurImageEndpointRequest, kernel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NLCustomImageEndpointResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NLCustomImageEndpointResponse, image_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::NLImage)},
  { 10, -1, -1, sizeof(::NLImageRotateRequest)},
  { 18, -1, -1, sizeof(::NLCustomImageEndpointRequest)},
  { 25, -1, -1, sizeof(::NLBlurImageEndpointRequest)},
  { 33, -1, -1, sizeof(::NLCustomImageEndpointResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_NLImage_default_instance_._instance,
  &::_NLImageRotateRequest_default_instance_._instance,
  &::_NLCustomImageEndpointRequest_default_instance_._instance,
  &::_NLBlurImageEndpointRequest_default_instance_._instance,
  &::_NLCustomImageEndpointResponse_default_instance_._instance,
};

const char descriptor_table_protodef_image_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013image.proto\"E\n\007NLImage\022\r\n\005color\030\001 \001(\005\022"
  "\014\n\004data\030\002 \001(\014\022\r\n\005width\030\003 \001(\005\022\016\n\006height\030\004"
  " \001(\005\"\260\001\n\024NLImageRotateRequest\0220\n\010rotatio"
  "n\030\001 \001(\0162\036.NLImageRotateRequest.Rotation\022"
  "\027\n\005image\030\002 \001(\0132\010.NLImage\"M\n\010Rotation\022\010\n\004"
  "NONE\020\000\022\016\n\nNINETY_DEG\020\001\022\022\n\016ONE_EIGHTY_DEG"
  "\020\002\022\023\n\017TWO_SEVENTY_DEG\020\003\"7\n\034NLCustomImage"
  "EndpointRequest\022\027\n\005image\030\001 \001(\0132\010.NLImage"
  "\"E\n\032NLBlurImageEndpointRequest\022\027\n\005image\030"
  "\001 \001(\0132\010.NLImage\022\016\n\006kernel\030\002 \001(\005\"8\n\035NLCus"
  "tomImageEndpointResponse\022\027\n\005image\030\001 \001(\0132"
  "\010.NLImage2\321\001\n\016NLImageService\022.\n\013RotateIm"
  "age\022\025.NLImageRotateRequest\032\010.NLImage\022T\n\023"
  "CustomImageEndpoint\022\035.NLCustomImageEndpo"
  "intRequest\032\036.NLCustomImageEndpointRespon"
  "se\0229\n\020MedianBlurFilter\022\033.NLBlurImageEndp"
  "ointRequest\032\010.NLImageB\036\n\032com.neuralink.i"
  "nterviewingP\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_image_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_image_2eproto = {
    false, false, 701, descriptor_table_protodef_image_2eproto,
    "image.proto",
    &descriptor_table_image_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_image_2eproto::offsets,
    file_level_metadata_image_2eproto, file_level_enum_descriptors_image_2eproto,
    file_level_service_descriptors_image_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_image_2eproto_getter() {
  return &descriptor_table_image_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_image_2eproto(&descriptor_table_image_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NLImageRotateRequest_Rotation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_image_2eproto);
  return file_level_enum_descriptors_image_2eproto[0];
}
bool NLImageRotateRequest_Rotation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr NLImageRotateRequest_Rotation NLImageRotateRequest::NONE;
constexpr NLImageRotateRequest_Rotation NLImageRotateRequest::NINETY_DEG;
constexpr NLImageRotateRequest_Rotation NLImageRotateRequest::ONE_EIGHTY_DEG;
constexpr NLImageRotateRequest_Rotation NLImageRotateRequest::TWO_SEVENTY_DEG;
constexpr NLImageRotateRequest_Rotation NLImageRotateRequest::Rotation_MIN;
constexpr NLImageRotateRequest_Rotation NLImageRotateRequest::Rotation_MAX;
constexpr int NLImageRotateRequest::Rotation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class NLImage::_Internal {
 public:
};

NLImage::NLImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:NLImage)
}
NLImage::NLImage(const NLImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&color_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:NLImage)
}

inline void NLImage::SharedCtor() {
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&color_)) + sizeof(height_));
}

NLImage::~NLImage() {
  // @@protoc_insertion_point(destructor:NLImage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NLImage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.Destroy();
}

void NLImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NLImage::Clear() {
// @@protoc_insertion_point(message_clear_start:NLImage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&color_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NLImage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NLImage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NLImage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 color = 1;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_color(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // int32 width = 3;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // int32 height = 4;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NLImage)
  return target;
}

size_t NLImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NLImage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 color = 1;
  if (this->_internal_color() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_color());
  }

  // int32 width = 3;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 4;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NLImage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NLImage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NLImage::GetClassData() const { return &_class_data_; }

void NLImage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NLImage *>(to)->MergeFrom(
      static_cast<const NLImage &>(from));
}


void NLImage::MergeFrom(const NLImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NLImage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_color() != 0) {
    _internal_set_color(from._internal_color());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NLImage::CopyFrom(const NLImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NLImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NLImage::IsInitialized() const {
  return true;
}

void NLImage::InternalSwap(NLImage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NLImage, height_)
      + sizeof(NLImage::height_)
      - PROTOBUF_FIELD_OFFSET(NLImage, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NLImage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_image_2eproto_getter, &descriptor_table_image_2eproto_once,
      file_level_metadata_image_2eproto[0]);
}

// ===================================================================

class NLImageRotateRequest::_Internal {
 public:
  static const ::NLImage& image(const NLImageRotateRequest* msg);
};

const ::NLImage&
NLImageRotateRequest::_Internal::image(const NLImageRotateRequest* msg) {
  return *msg->image_;
}
NLImageRotateRequest::NLImageRotateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:NLImageRotateRequest)
}
NLImageRotateRequest::NLImageRotateRequest(const NLImageRotateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    image_ = new ::NLImage(*from.image_);
  } else {
    image_ = nullptr;
  }
  rotation_ = from.rotation_;
  // @@protoc_insertion_point(copy_constructor:NLImageRotateRequest)
}

inline void NLImageRotateRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&image_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rotation_) -
    reinterpret_cast<char*>(&image_)) + sizeof(rotation_));
}

NLImageRotateRequest::~NLImageRotateRequest() {
  // @@protoc_insertion_point(destructor:NLImageRotateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NLImageRotateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete image_;
}

void NLImageRotateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NLImageRotateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:NLImageRotateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  rotation_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NLImageRotateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .NLImageRotateRequest.Rotation rotation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rotation(static_cast<::NLImageRotateRequest_Rotation>(val));
        } else
          goto handle_unusual;
        continue;
      // .NLImage image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NLImageRotateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NLImageRotateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .NLImageRotateRequest.Rotation rotation = 1;
  if (this->_internal_rotation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rotation(), target);
  }

  // .NLImage image = 2;
  if (this->_internal_has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NLImageRotateRequest)
  return target;
}

size_t NLImageRotateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NLImageRotateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NLImage image = 2;
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // .NLImageRotateRequest.Rotation rotation = 1;
  if (this->_internal_rotation() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_rotation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NLImageRotateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NLImageRotateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NLImageRotateRequest::GetClassData() const { return &_class_data_; }

void NLImageRotateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NLImageRotateRequest *>(to)->MergeFrom(
      static_cast<const NLImageRotateRequest &>(from));
}


void NLImageRotateRequest::MergeFrom(const NLImageRotateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NLImageRotateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image()) {
    _internal_mutable_image()->::NLImage::MergeFrom(from._internal_image());
  }
  if (from._internal_rotation() != 0) {
    _internal_set_rotation(from._internal_rotation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NLImageRotateRequest::CopyFrom(const NLImageRotateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NLImageRotateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NLImageRotateRequest::IsInitialized() const {
  return true;
}

void NLImageRotateRequest::InternalSwap(NLImageRotateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NLImageRotateRequest, rotation_)
      + sizeof(NLImageRotateRequest::rotation_)
      - PROTOBUF_FIELD_OFFSET(NLImageRotateRequest, image_)>(
          reinterpret_cast<char*>(&image_),
          reinterpret_cast<char*>(&other->image_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NLImageRotateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_image_2eproto_getter, &descriptor_table_image_2eproto_once,
      file_level_metadata_image_2eproto[1]);
}

// ===================================================================

class NLCustomImageEndpointRequest::_Internal {
 public:
  static const ::NLImage& image(const NLCustomImageEndpointRequest* msg);
};

const ::NLImage&
NLCustomImageEndpointRequest::_Internal::image(const NLCustomImageEndpointRequest* msg) {
  return *msg->image_;
}
NLCustomImageEndpointRequest::NLCustomImageEndpointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:NLCustomImageEndpointRequest)
}
NLCustomImageEndpointRequest::NLCustomImageEndpointRequest(const NLCustomImageEndpointRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    image_ = new ::NLImage(*from.image_);
  } else {
    image_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NLCustomImageEndpointRequest)
}

inline void NLCustomImageEndpointRequest::SharedCtor() {
image_ = nullptr;
}

NLCustomImageEndpointRequest::~NLCustomImageEndpointRequest() {
  // @@protoc_insertion_point(destructor:NLCustomImageEndpointRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NLCustomImageEndpointRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete image_;
}

void NLCustomImageEndpointRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NLCustomImageEndpointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:NLCustomImageEndpointRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NLCustomImageEndpointRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .NLImage image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NLCustomImageEndpointRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NLCustomImageEndpointRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .NLImage image = 1;
  if (this->_internal_has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NLCustomImageEndpointRequest)
  return target;
}

size_t NLCustomImageEndpointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NLCustomImageEndpointRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NLImage image = 1;
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NLCustomImageEndpointRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NLCustomImageEndpointRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NLCustomImageEndpointRequest::GetClassData() const { return &_class_data_; }

void NLCustomImageEndpointRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NLCustomImageEndpointRequest *>(to)->MergeFrom(
      static_cast<const NLCustomImageEndpointRequest &>(from));
}


void NLCustomImageEndpointRequest::MergeFrom(const NLCustomImageEndpointRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NLCustomImageEndpointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image()) {
    _internal_mutable_image()->::NLImage::MergeFrom(from._internal_image());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NLCustomImageEndpointRequest::CopyFrom(const NLCustomImageEndpointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NLCustomImageEndpointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NLCustomImageEndpointRequest::IsInitialized() const {
  return true;
}

void NLCustomImageEndpointRequest::InternalSwap(NLCustomImageEndpointRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(image_, other->image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NLCustomImageEndpointRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_image_2eproto_getter, &descriptor_table_image_2eproto_once,
      file_level_metadata_image_2eproto[2]);
}

// ===================================================================

class NLBlurImageEndpointRequest::_Internal {
 public:
  static const ::NLImage& image(const NLBlurImageEndpointRequest* msg);
};

const ::NLImage&
NLBlurImageEndpointRequest::_Internal::image(const NLBlurImageEndpointRequest* msg) {
  return *msg->image_;
}
NLBlurImageEndpointRequest::NLBlurImageEndpointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:NLBlurImageEndpointRequest)
}
NLBlurImageEndpointRequest::NLBlurImageEndpointRequest(const NLBlurImageEndpointRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    image_ = new ::NLImage(*from.image_);
  } else {
    image_ = nullptr;
  }
  kernel_ = from.kernel_;
  // @@protoc_insertion_point(copy_constructor:NLBlurImageEndpointRequest)
}

inline void NLBlurImageEndpointRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&image_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&kernel_) -
    reinterpret_cast<char*>(&image_)) + sizeof(kernel_));
}

NLBlurImageEndpointRequest::~NLBlurImageEndpointRequest() {
  // @@protoc_insertion_point(destructor:NLBlurImageEndpointRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NLBlurImageEndpointRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete image_;
}

void NLBlurImageEndpointRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NLBlurImageEndpointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:NLBlurImageEndpointRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  kernel_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NLBlurImageEndpointRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .NLImage image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 kernel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          kernel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NLBlurImageEndpointRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NLBlurImageEndpointRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .NLImage image = 1;
  if (this->_internal_has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  // int32 kernel = 2;
  if (this->_internal_kernel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_kernel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NLBlurImageEndpointRequest)
  return target;
}

size_t NLBlurImageEndpointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NLBlurImageEndpointRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NLImage image = 1;
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // int32 kernel = 2;
  if (this->_internal_kernel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kernel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NLBlurImageEndpointRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NLBlurImageEndpointRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NLBlurImageEndpointRequest::GetClassData() const { return &_class_data_; }

void NLBlurImageEndpointRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NLBlurImageEndpointRequest *>(to)->MergeFrom(
      static_cast<const NLBlurImageEndpointRequest &>(from));
}


void NLBlurImageEndpointRequest::MergeFrom(const NLBlurImageEndpointRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NLBlurImageEndpointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image()) {
    _internal_mutable_image()->::NLImage::MergeFrom(from._internal_image());
  }
  if (from._internal_kernel() != 0) {
    _internal_set_kernel(from._internal_kernel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NLBlurImageEndpointRequest::CopyFrom(const NLBlurImageEndpointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NLBlurImageEndpointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NLBlurImageEndpointRequest::IsInitialized() const {
  return true;
}

void NLBlurImageEndpointRequest::InternalSwap(NLBlurImageEndpointRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NLBlurImageEndpointRequest, kernel_)
      + sizeof(NLBlurImageEndpointRequest::kernel_)
      - PROTOBUF_FIELD_OFFSET(NLBlurImageEndpointRequest, image_)>(
          reinterpret_cast<char*>(&image_),
          reinterpret_cast<char*>(&other->image_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NLBlurImageEndpointRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_image_2eproto_getter, &descriptor_table_image_2eproto_once,
      file_level_metadata_image_2eproto[3]);
}

// ===================================================================

class NLCustomImageEndpointResponse::_Internal {
 public:
  static const ::NLImage& image(const NLCustomImageEndpointResponse* msg);
};

const ::NLImage&
NLCustomImageEndpointResponse::_Internal::image(const NLCustomImageEndpointResponse* msg) {
  return *msg->image_;
}
NLCustomImageEndpointResponse::NLCustomImageEndpointResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:NLCustomImageEndpointResponse)
}
NLCustomImageEndpointResponse::NLCustomImageEndpointResponse(const NLCustomImageEndpointResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    image_ = new ::NLImage(*from.image_);
  } else {
    image_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NLCustomImageEndpointResponse)
}

inline void NLCustomImageEndpointResponse::SharedCtor() {
image_ = nullptr;
}

NLCustomImageEndpointResponse::~NLCustomImageEndpointResponse() {
  // @@protoc_insertion_point(destructor:NLCustomImageEndpointResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NLCustomImageEndpointResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete image_;
}

void NLCustomImageEndpointResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NLCustomImageEndpointResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:NLCustomImageEndpointResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NLCustomImageEndpointResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .NLImage image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NLCustomImageEndpointResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NLCustomImageEndpointResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .NLImage image = 1;
  if (this->_internal_has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NLCustomImageEndpointResponse)
  return target;
}

size_t NLCustomImageEndpointResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NLCustomImageEndpointResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NLImage image = 1;
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NLCustomImageEndpointResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NLCustomImageEndpointResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NLCustomImageEndpointResponse::GetClassData() const { return &_class_data_; }

void NLCustomImageEndpointResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NLCustomImageEndpointResponse *>(to)->MergeFrom(
      static_cast<const NLCustomImageEndpointResponse &>(from));
}


void NLCustomImageEndpointResponse::MergeFrom(const NLCustomImageEndpointResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NLCustomImageEndpointResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image()) {
    _internal_mutable_image()->::NLImage::MergeFrom(from._internal_image());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NLCustomImageEndpointResponse::CopyFrom(const NLCustomImageEndpointResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NLCustomImageEndpointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NLCustomImageEndpointResponse::IsInitialized() const {
  return true;
}

void NLCustomImageEndpointResponse::InternalSwap(NLCustomImageEndpointResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(image_, other->image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NLCustomImageEndpointResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_image_2eproto_getter, &descriptor_table_image_2eproto_once,
      file_level_metadata_image_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NLImage*
Arena::CreateMaybeMessage< ::NLImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NLImage >(arena);
}
template<> PROTOBUF_NOINLINE ::NLImageRotateRequest*
Arena::CreateMaybeMessage< ::NLImageRotateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NLImageRotateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::NLCustomImageEndpointRequest*
Arena::CreateMaybeMessage< ::NLCustomImageEndpointRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NLCustomImageEndpointRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::NLBlurImageEndpointRequest*
Arena::CreateMaybeMessage< ::NLBlurImageEndpointRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NLBlurImageEndpointRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::NLCustomImageEndpointResponse*
Arena::CreateMaybeMessage< ::NLCustomImageEndpointResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NLCustomImageEndpointResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
