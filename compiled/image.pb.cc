// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image.proto

#include "image.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_image_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NLImage_image_2eproto;
class NLImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NLImage> _instance;
} _NLImage_default_instance_;
class NLImageRotateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NLImageRotateRequest> _instance;
} _NLImageRotateRequest_default_instance_;
class NLCustomImageEndpointRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NLCustomImageEndpointRequest> _instance;
} _NLCustomImageEndpointRequest_default_instance_;
class NLCustomImageEndpointResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NLCustomImageEndpointResponse> _instance;
} _NLCustomImageEndpointResponse_default_instance_;
static void InitDefaultsscc_info_NLCustomImageEndpointRequest_image_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NLCustomImageEndpointRequest_default_instance_;
    new (ptr) ::NLCustomImageEndpointRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NLCustomImageEndpointRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NLCustomImageEndpointRequest_image_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NLCustomImageEndpointRequest_image_2eproto}, {
      &scc_info_NLImage_image_2eproto.base,}};

static void InitDefaultsscc_info_NLCustomImageEndpointResponse_image_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NLCustomImageEndpointResponse_default_instance_;
    new (ptr) ::NLCustomImageEndpointResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NLCustomImageEndpointResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NLCustomImageEndpointResponse_image_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NLCustomImageEndpointResponse_image_2eproto}, {
      &scc_info_NLImage_image_2eproto.base,}};

static void InitDefaultsscc_info_NLImage_image_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NLImage_default_instance_;
    new (ptr) ::NLImage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NLImage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NLImage_image_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NLImage_image_2eproto}, {}};

static void InitDefaultsscc_info_NLImageRotateRequest_image_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NLImageRotateRequest_default_instance_;
    new (ptr) ::NLImageRotateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NLImageRotateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NLImageRotateRequest_image_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NLImageRotateRequest_image_2eproto}, {
      &scc_info_NLImage_image_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_image_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_image_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_image_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_image_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NLImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NLImage, color_),
  PROTOBUF_FIELD_OFFSET(::NLImage, data_),
  PROTOBUF_FIELD_OFFSET(::NLImage, width_),
  PROTOBUF_FIELD_OFFSET(::NLImage, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NLImageRotateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NLImageRotateRequest, rotation_),
  PROTOBUF_FIELD_OFFSET(::NLImageRotateRequest, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NLCustomImageEndpointRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NLCustomImageEndpointRequest, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NLCustomImageEndpointResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NLCustomImageEndpointResponse, image_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NLImage)},
  { 9, -1, sizeof(::NLImageRotateRequest)},
  { 16, -1, sizeof(::NLCustomImageEndpointRequest)},
  { 22, -1, sizeof(::NLCustomImageEndpointResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NLImage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NLImageRotateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NLCustomImageEndpointRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NLCustomImageEndpointResponse_default_instance_),
};

const char descriptor_table_protodef_image_2eproto[] =
  "\n\013image.proto\"E\n\007NLImage\022\r\n\005color\030\001 \001(\005\022"
  "\014\n\004data\030\002 \001(\014\022\r\n\005width\030\003 \001(\005\022\016\n\006height\030\004"
  " \001(\005\"\260\001\n\024NLImageRotateRequest\0220\n\010rotatio"
  "n\030\001 \001(\0162\036.NLImageRotateRequest.Rotation\022"
  "\027\n\005image\030\002 \001(\0132\010.NLImage\"M\n\010Rotation\022\010\n\004"
  "NONE\020\000\022\016\n\nNINETY_DEG\020\001\022\022\n\016ONE_EIGHTY_DEG"
  "\020\002\022\023\n\017TWO_SEVENTY_DEG\020\003\"7\n\034NLCustomImage"
  "EndpointRequest\022\027\n\005image\030\001 \001(\0132\010.NLImage"
  "\"8\n\035NLCustomImageEndpointResponse\022\027\n\005ima"
  "ge\030\001 \001(\0132\010.NLImage2\226\001\n\016NLImageService\022.\n"
  "\013RotateImage\022\025.NLImageRotateRequest\032\010.NL"
  "Image\022T\n\023CustomImageEndpoint\022\035.NLCustomI"
  "mageEndpointRequest\032\036.NLCustomImageEndpo"
  "intResponseB\036\n\032com.neuralink.interviewin"
  "gP\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_image_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_image_2eproto_sccs[4] = {
  &scc_info_NLCustomImageEndpointRequest_image_2eproto.base,
  &scc_info_NLCustomImageEndpointResponse_image_2eproto.base,
  &scc_info_NLImage_image_2eproto.base,
  &scc_info_NLImageRotateRequest_image_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_image_2eproto_once;
static bool descriptor_table_image_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_image_2eproto = {
  &descriptor_table_image_2eproto_initialized, descriptor_table_protodef_image_2eproto, "image.proto", 571,
  &descriptor_table_image_2eproto_once, descriptor_table_image_2eproto_sccs, descriptor_table_image_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_image_2eproto::offsets,
  file_level_metadata_image_2eproto, 4, file_level_enum_descriptors_image_2eproto, file_level_service_descriptors_image_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_image_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_image_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NLImageRotateRequest_Rotation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_image_2eproto);
  return file_level_enum_descriptors_image_2eproto[0];
}
bool NLImageRotateRequest_Rotation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NLImageRotateRequest_Rotation NLImageRotateRequest::NONE;
constexpr NLImageRotateRequest_Rotation NLImageRotateRequest::NINETY_DEG;
constexpr NLImageRotateRequest_Rotation NLImageRotateRequest::ONE_EIGHTY_DEG;
constexpr NLImageRotateRequest_Rotation NLImageRotateRequest::TWO_SEVENTY_DEG;
constexpr NLImageRotateRequest_Rotation NLImageRotateRequest::Rotation_MIN;
constexpr NLImageRotateRequest_Rotation NLImageRotateRequest::Rotation_MAX;
constexpr int NLImageRotateRequest::Rotation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void NLImage::InitAsDefaultInstance() {
}
class NLImage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NLImage::kColorFieldNumber;
const int NLImage::kDataFieldNumber;
const int NLImage::kWidthFieldNumber;
const int NLImage::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NLImage::NLImage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NLImage)
}
NLImage::NLImage(const NLImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&color_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:NLImage)
}

void NLImage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NLImage_image_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&color_)) + sizeof(height_));
}

NLImage::~NLImage() {
  // @@protoc_insertion_point(destructor:NLImage)
  SharedDtor();
}

void NLImage::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NLImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NLImage& NLImage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NLImage_image_2eproto.base);
  return *internal_default_instance();
}


void NLImage::Clear() {
// @@protoc_insertion_point(message_clear_start:NLImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&color_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NLImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NLImage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NLImage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 color = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NLImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NLImage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NLImage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NLImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 color = 1;
  if (this->color() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->color(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // int32 width = 3;
  if (this->width() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // int32 height = 4;
  if (this->height() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NLImage)
}

::PROTOBUF_NAMESPACE_ID::uint8* NLImage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NLImage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 color = 1;
  if (this->color() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->color(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // int32 width = 3;
  if (this->width() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // int32 height = 4;
  if (this->height() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NLImage)
  return target;
}

size_t NLImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NLImage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int32 color = 1;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->color());
  }

  // int32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->height());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NLImage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NLImage)
  GOOGLE_DCHECK_NE(&from, this);
  const NLImage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NLImage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NLImage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NLImage)
    MergeFrom(*source);
  }
}

void NLImage::MergeFrom(const NLImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NLImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void NLImage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NLImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NLImage::CopyFrom(const NLImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NLImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NLImage::IsInitialized() const {
  return true;
}

void NLImage::Swap(NLImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NLImage::InternalSwap(NLImage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(color_, other->color_);
  swap(width_, other->width_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NLImage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NLImageRotateRequest::InitAsDefaultInstance() {
  ::_NLImageRotateRequest_default_instance_._instance.get_mutable()->image_ = const_cast< ::NLImage*>(
      ::NLImage::internal_default_instance());
}
class NLImageRotateRequest::HasBitSetters {
 public:
  static const ::NLImage& image(const NLImageRotateRequest* msg);
};

const ::NLImage&
NLImageRotateRequest::HasBitSetters::image(const NLImageRotateRequest* msg) {
  return *msg->image_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NLImageRotateRequest::kRotationFieldNumber;
const int NLImageRotateRequest::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NLImageRotateRequest::NLImageRotateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NLImageRotateRequest)
}
NLImageRotateRequest::NLImageRotateRequest(const NLImageRotateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_image()) {
    image_ = new ::NLImage(*from.image_);
  } else {
    image_ = nullptr;
  }
  rotation_ = from.rotation_;
  // @@protoc_insertion_point(copy_constructor:NLImageRotateRequest)
}

void NLImageRotateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NLImageRotateRequest_image_2eproto.base);
  ::memset(&image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&image_)) + sizeof(rotation_));
}

NLImageRotateRequest::~NLImageRotateRequest() {
  // @@protoc_insertion_point(destructor:NLImageRotateRequest)
  SharedDtor();
}

void NLImageRotateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete image_;
}

void NLImageRotateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NLImageRotateRequest& NLImageRotateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NLImageRotateRequest_image_2eproto.base);
  return *internal_default_instance();
}


void NLImageRotateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:NLImageRotateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  rotation_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NLImageRotateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NLImageRotateRequest.Rotation rotation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_rotation(static_cast<::NLImageRotateRequest_Rotation>(val));
        } else goto handle_unusual;
        continue;
      // .NLImage image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NLImageRotateRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NLImageRotateRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NLImageRotateRequest.Rotation rotation = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rotation(static_cast< ::NLImageRotateRequest_Rotation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .NLImage image = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NLImageRotateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NLImageRotateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NLImageRotateRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NLImageRotateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NLImageRotateRequest.Rotation rotation = 1;
  if (this->rotation() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->rotation(), output);
  }

  // .NLImage image = 2;
  if (this->has_image()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::image(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NLImageRotateRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* NLImageRotateRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NLImageRotateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NLImageRotateRequest.Rotation rotation = 1;
  if (this->rotation() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->rotation(), target);
  }

  // .NLImage image = 2;
  if (this->has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::image(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NLImageRotateRequest)
  return target;
}

size_t NLImageRotateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NLImageRotateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NLImage image = 2;
  if (this->has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // .NLImageRotateRequest.Rotation rotation = 1;
  if (this->rotation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->rotation());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NLImageRotateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NLImageRotateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NLImageRotateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NLImageRotateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NLImageRotateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NLImageRotateRequest)
    MergeFrom(*source);
  }
}

void NLImageRotateRequest::MergeFrom(const NLImageRotateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NLImageRotateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_image()) {
    mutable_image()->::NLImage::MergeFrom(from.image());
  }
  if (from.rotation() != 0) {
    set_rotation(from.rotation());
  }
}

void NLImageRotateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NLImageRotateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NLImageRotateRequest::CopyFrom(const NLImageRotateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NLImageRotateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NLImageRotateRequest::IsInitialized() const {
  return true;
}

void NLImageRotateRequest::Swap(NLImageRotateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NLImageRotateRequest::InternalSwap(NLImageRotateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(image_, other->image_);
  swap(rotation_, other->rotation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NLImageRotateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NLCustomImageEndpointRequest::InitAsDefaultInstance() {
  ::_NLCustomImageEndpointRequest_default_instance_._instance.get_mutable()->image_ = const_cast< ::NLImage*>(
      ::NLImage::internal_default_instance());
}
class NLCustomImageEndpointRequest::HasBitSetters {
 public:
  static const ::NLImage& image(const NLCustomImageEndpointRequest* msg);
};

const ::NLImage&
NLCustomImageEndpointRequest::HasBitSetters::image(const NLCustomImageEndpointRequest* msg) {
  return *msg->image_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NLCustomImageEndpointRequest::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NLCustomImageEndpointRequest::NLCustomImageEndpointRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NLCustomImageEndpointRequest)
}
NLCustomImageEndpointRequest::NLCustomImageEndpointRequest(const NLCustomImageEndpointRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_image()) {
    image_ = new ::NLImage(*from.image_);
  } else {
    image_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NLCustomImageEndpointRequest)
}

void NLCustomImageEndpointRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NLCustomImageEndpointRequest_image_2eproto.base);
  image_ = nullptr;
}

NLCustomImageEndpointRequest::~NLCustomImageEndpointRequest() {
  // @@protoc_insertion_point(destructor:NLCustomImageEndpointRequest)
  SharedDtor();
}

void NLCustomImageEndpointRequest::SharedDtor() {
  if (this != internal_default_instance()) delete image_;
}

void NLCustomImageEndpointRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NLCustomImageEndpointRequest& NLCustomImageEndpointRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NLCustomImageEndpointRequest_image_2eproto.base);
  return *internal_default_instance();
}


void NLCustomImageEndpointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:NLCustomImageEndpointRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NLCustomImageEndpointRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NLImage image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NLCustomImageEndpointRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NLCustomImageEndpointRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NLImage image = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NLCustomImageEndpointRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NLCustomImageEndpointRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NLCustomImageEndpointRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NLCustomImageEndpointRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NLImage image = 1;
  if (this->has_image()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::image(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NLCustomImageEndpointRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* NLCustomImageEndpointRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NLCustomImageEndpointRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NLImage image = 1;
  if (this->has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::image(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NLCustomImageEndpointRequest)
  return target;
}

size_t NLCustomImageEndpointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NLCustomImageEndpointRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NLImage image = 1;
  if (this->has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NLCustomImageEndpointRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NLCustomImageEndpointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NLCustomImageEndpointRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NLCustomImageEndpointRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NLCustomImageEndpointRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NLCustomImageEndpointRequest)
    MergeFrom(*source);
  }
}

void NLCustomImageEndpointRequest::MergeFrom(const NLCustomImageEndpointRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NLCustomImageEndpointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_image()) {
    mutable_image()->::NLImage::MergeFrom(from.image());
  }
}

void NLCustomImageEndpointRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NLCustomImageEndpointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NLCustomImageEndpointRequest::CopyFrom(const NLCustomImageEndpointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NLCustomImageEndpointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NLCustomImageEndpointRequest::IsInitialized() const {
  return true;
}

void NLCustomImageEndpointRequest::Swap(NLCustomImageEndpointRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NLCustomImageEndpointRequest::InternalSwap(NLCustomImageEndpointRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(image_, other->image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NLCustomImageEndpointRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NLCustomImageEndpointResponse::InitAsDefaultInstance() {
  ::_NLCustomImageEndpointResponse_default_instance_._instance.get_mutable()->image_ = const_cast< ::NLImage*>(
      ::NLImage::internal_default_instance());
}
class NLCustomImageEndpointResponse::HasBitSetters {
 public:
  static const ::NLImage& image(const NLCustomImageEndpointResponse* msg);
};

const ::NLImage&
NLCustomImageEndpointResponse::HasBitSetters::image(const NLCustomImageEndpointResponse* msg) {
  return *msg->image_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NLCustomImageEndpointResponse::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NLCustomImageEndpointResponse::NLCustomImageEndpointResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NLCustomImageEndpointResponse)
}
NLCustomImageEndpointResponse::NLCustomImageEndpointResponse(const NLCustomImageEndpointResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_image()) {
    image_ = new ::NLImage(*from.image_);
  } else {
    image_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NLCustomImageEndpointResponse)
}

void NLCustomImageEndpointResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NLCustomImageEndpointResponse_image_2eproto.base);
  image_ = nullptr;
}

NLCustomImageEndpointResponse::~NLCustomImageEndpointResponse() {
  // @@protoc_insertion_point(destructor:NLCustomImageEndpointResponse)
  SharedDtor();
}

void NLCustomImageEndpointResponse::SharedDtor() {
  if (this != internal_default_instance()) delete image_;
}

void NLCustomImageEndpointResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NLCustomImageEndpointResponse& NLCustomImageEndpointResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NLCustomImageEndpointResponse_image_2eproto.base);
  return *internal_default_instance();
}


void NLCustomImageEndpointResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:NLCustomImageEndpointResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NLCustomImageEndpointResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NLImage image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NLCustomImageEndpointResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:NLCustomImageEndpointResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .NLImage image = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NLCustomImageEndpointResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NLCustomImageEndpointResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NLCustomImageEndpointResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NLCustomImageEndpointResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NLImage image = 1;
  if (this->has_image()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::image(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NLCustomImageEndpointResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* NLCustomImageEndpointResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NLCustomImageEndpointResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NLImage image = 1;
  if (this->has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::image(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NLCustomImageEndpointResponse)
  return target;
}

size_t NLCustomImageEndpointResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NLCustomImageEndpointResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NLImage image = 1;
  if (this->has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NLCustomImageEndpointResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NLCustomImageEndpointResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NLCustomImageEndpointResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NLCustomImageEndpointResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NLCustomImageEndpointResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NLCustomImageEndpointResponse)
    MergeFrom(*source);
  }
}

void NLCustomImageEndpointResponse::MergeFrom(const NLCustomImageEndpointResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NLCustomImageEndpointResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_image()) {
    mutable_image()->::NLImage::MergeFrom(from.image());
  }
}

void NLCustomImageEndpointResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NLCustomImageEndpointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NLCustomImageEndpointResponse::CopyFrom(const NLCustomImageEndpointResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NLCustomImageEndpointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NLCustomImageEndpointResponse::IsInitialized() const {
  return true;
}

void NLCustomImageEndpointResponse::Swap(NLCustomImageEndpointResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NLCustomImageEndpointResponse::InternalSwap(NLCustomImageEndpointResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(image_, other->image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NLCustomImageEndpointResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NLImage* Arena::CreateMaybeMessage< ::NLImage >(Arena* arena) {
  return Arena::CreateInternal< ::NLImage >(arena);
}
template<> PROTOBUF_NOINLINE ::NLImageRotateRequest* Arena::CreateMaybeMessage< ::NLImageRotateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::NLImageRotateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::NLCustomImageEndpointRequest* Arena::CreateMaybeMessage< ::NLCustomImageEndpointRequest >(Arena* arena) {
  return Arena::CreateInternal< ::NLCustomImageEndpointRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::NLCustomImageEndpointResponse* Arena::CreateMaybeMessage< ::NLCustomImageEndpointResponse >(Arena* arena) {
  return Arena::CreateInternal< ::NLCustomImageEndpointResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
