// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_image_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_image_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_image_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_image_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_image_2eproto;
class NLCustomImageEndpointRequest;
class NLCustomImageEndpointRequestDefaultTypeInternal;
extern NLCustomImageEndpointRequestDefaultTypeInternal _NLCustomImageEndpointRequest_default_instance_;
class NLCustomImageEndpointResponse;
class NLCustomImageEndpointResponseDefaultTypeInternal;
extern NLCustomImageEndpointResponseDefaultTypeInternal _NLCustomImageEndpointResponse_default_instance_;
class NLImage;
class NLImageDefaultTypeInternal;
extern NLImageDefaultTypeInternal _NLImage_default_instance_;
class NLImageRotateRequest;
class NLImageRotateRequestDefaultTypeInternal;
extern NLImageRotateRequestDefaultTypeInternal _NLImageRotateRequest_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::NLCustomImageEndpointRequest* Arena::CreateMaybeMessage<::NLCustomImageEndpointRequest>(Arena*);
template<> ::NLCustomImageEndpointResponse* Arena::CreateMaybeMessage<::NLCustomImageEndpointResponse>(Arena*);
template<> ::NLImage* Arena::CreateMaybeMessage<::NLImage>(Arena*);
template<> ::NLImageRotateRequest* Arena::CreateMaybeMessage<::NLImageRotateRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum NLImageRotateRequest_Rotation : int {
  NLImageRotateRequest_Rotation_NONE = 0,
  NLImageRotateRequest_Rotation_NINETY_DEG = 1,
  NLImageRotateRequest_Rotation_ONE_EIGHTY_DEG = 2,
  NLImageRotateRequest_Rotation_TWO_SEVENTY_DEG = 3,
  NLImageRotateRequest_Rotation_NLImageRotateRequest_Rotation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NLImageRotateRequest_Rotation_NLImageRotateRequest_Rotation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NLImageRotateRequest_Rotation_IsValid(int value);
constexpr NLImageRotateRequest_Rotation NLImageRotateRequest_Rotation_Rotation_MIN = NLImageRotateRequest_Rotation_NONE;
constexpr NLImageRotateRequest_Rotation NLImageRotateRequest_Rotation_Rotation_MAX = NLImageRotateRequest_Rotation_TWO_SEVENTY_DEG;
constexpr int NLImageRotateRequest_Rotation_Rotation_ARRAYSIZE = NLImageRotateRequest_Rotation_Rotation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NLImageRotateRequest_Rotation_descriptor();
template<typename T>
inline const std::string& NLImageRotateRequest_Rotation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NLImageRotateRequest_Rotation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NLImageRotateRequest_Rotation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NLImageRotateRequest_Rotation_descriptor(), enum_t_value);
}
inline bool NLImageRotateRequest_Rotation_Parse(
    const std::string& name, NLImageRotateRequest_Rotation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NLImageRotateRequest_Rotation>(
    NLImageRotateRequest_Rotation_descriptor(), name, value);
}
// ===================================================================

class NLImage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NLImage) */ {
 public:
  NLImage();
  virtual ~NLImage();

  NLImage(const NLImage& from);
  NLImage(NLImage&& from) noexcept
    : NLImage() {
    *this = ::std::move(from);
  }

  inline NLImage& operator=(const NLImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NLImage& operator=(NLImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NLImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NLImage* internal_default_instance() {
    return reinterpret_cast<const NLImage*>(
               &_NLImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NLImage* other);
  friend void swap(NLImage& a, NLImage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NLImage* New() const final {
    return CreateMaybeMessage<NLImage>(nullptr);
  }

  NLImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NLImage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NLImage& from);
  void MergeFrom(const NLImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NLImage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NLImage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_image_2eproto);
    return ::descriptor_table_image_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // int32 color = 1;
  void clear_color();
  static const int kColorFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:NLImage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 color_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_image_2eproto;
};
// -------------------------------------------------------------------

class NLImageRotateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NLImageRotateRequest) */ {
 public:
  NLImageRotateRequest();
  virtual ~NLImageRotateRequest();

  NLImageRotateRequest(const NLImageRotateRequest& from);
  NLImageRotateRequest(NLImageRotateRequest&& from) noexcept
    : NLImageRotateRequest() {
    *this = ::std::move(from);
  }

  inline NLImageRotateRequest& operator=(const NLImageRotateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NLImageRotateRequest& operator=(NLImageRotateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NLImageRotateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NLImageRotateRequest* internal_default_instance() {
    return reinterpret_cast<const NLImageRotateRequest*>(
               &_NLImageRotateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NLImageRotateRequest* other);
  friend void swap(NLImageRotateRequest& a, NLImageRotateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NLImageRotateRequest* New() const final {
    return CreateMaybeMessage<NLImageRotateRequest>(nullptr);
  }

  NLImageRotateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NLImageRotateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NLImageRotateRequest& from);
  void MergeFrom(const NLImageRotateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NLImageRotateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NLImageRotateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_image_2eproto);
    return ::descriptor_table_image_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NLImageRotateRequest_Rotation Rotation;
  static constexpr Rotation NONE =
    NLImageRotateRequest_Rotation_NONE;
  static constexpr Rotation NINETY_DEG =
    NLImageRotateRequest_Rotation_NINETY_DEG;
  static constexpr Rotation ONE_EIGHTY_DEG =
    NLImageRotateRequest_Rotation_ONE_EIGHTY_DEG;
  static constexpr Rotation TWO_SEVENTY_DEG =
    NLImageRotateRequest_Rotation_TWO_SEVENTY_DEG;
  static inline bool Rotation_IsValid(int value) {
    return NLImageRotateRequest_Rotation_IsValid(value);
  }
  static constexpr Rotation Rotation_MIN =
    NLImageRotateRequest_Rotation_Rotation_MIN;
  static constexpr Rotation Rotation_MAX =
    NLImageRotateRequest_Rotation_Rotation_MAX;
  static constexpr int Rotation_ARRAYSIZE =
    NLImageRotateRequest_Rotation_Rotation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Rotation_descriptor() {
    return NLImageRotateRequest_Rotation_descriptor();
  }
  template<typename T>
  static inline const std::string& Rotation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Rotation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Rotation_Name.");
    return NLImageRotateRequest_Rotation_Name(enum_t_value);
  }
  static inline bool Rotation_Parse(const std::string& name,
      Rotation* value) {
    return NLImageRotateRequest_Rotation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .NLImage image = 2;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 2;
  const ::NLImage& image() const;
  ::NLImage* release_image();
  ::NLImage* mutable_image();
  void set_allocated_image(::NLImage* image);

  // .NLImageRotateRequest.Rotation rotation = 1;
  void clear_rotation();
  static const int kRotationFieldNumber = 1;
  ::NLImageRotateRequest_Rotation rotation() const;
  void set_rotation(::NLImageRotateRequest_Rotation value);

  // @@protoc_insertion_point(class_scope:NLImageRotateRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::NLImage* image_;
  int rotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_image_2eproto;
};
// -------------------------------------------------------------------

class NLCustomImageEndpointRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NLCustomImageEndpointRequest) */ {
 public:
  NLCustomImageEndpointRequest();
  virtual ~NLCustomImageEndpointRequest();

  NLCustomImageEndpointRequest(const NLCustomImageEndpointRequest& from);
  NLCustomImageEndpointRequest(NLCustomImageEndpointRequest&& from) noexcept
    : NLCustomImageEndpointRequest() {
    *this = ::std::move(from);
  }

  inline NLCustomImageEndpointRequest& operator=(const NLCustomImageEndpointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NLCustomImageEndpointRequest& operator=(NLCustomImageEndpointRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NLCustomImageEndpointRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NLCustomImageEndpointRequest* internal_default_instance() {
    return reinterpret_cast<const NLCustomImageEndpointRequest*>(
               &_NLCustomImageEndpointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NLCustomImageEndpointRequest* other);
  friend void swap(NLCustomImageEndpointRequest& a, NLCustomImageEndpointRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NLCustomImageEndpointRequest* New() const final {
    return CreateMaybeMessage<NLCustomImageEndpointRequest>(nullptr);
  }

  NLCustomImageEndpointRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NLCustomImageEndpointRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NLCustomImageEndpointRequest& from);
  void MergeFrom(const NLCustomImageEndpointRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NLCustomImageEndpointRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NLCustomImageEndpointRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_image_2eproto);
    return ::descriptor_table_image_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NLImage image = 1;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const ::NLImage& image() const;
  ::NLImage* release_image();
  ::NLImage* mutable_image();
  void set_allocated_image(::NLImage* image);

  // @@protoc_insertion_point(class_scope:NLCustomImageEndpointRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::NLImage* image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_image_2eproto;
};
// -------------------------------------------------------------------

class NLCustomImageEndpointResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NLCustomImageEndpointResponse) */ {
 public:
  NLCustomImageEndpointResponse();
  virtual ~NLCustomImageEndpointResponse();

  NLCustomImageEndpointResponse(const NLCustomImageEndpointResponse& from);
  NLCustomImageEndpointResponse(NLCustomImageEndpointResponse&& from) noexcept
    : NLCustomImageEndpointResponse() {
    *this = ::std::move(from);
  }

  inline NLCustomImageEndpointResponse& operator=(const NLCustomImageEndpointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NLCustomImageEndpointResponse& operator=(NLCustomImageEndpointResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NLCustomImageEndpointResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NLCustomImageEndpointResponse* internal_default_instance() {
    return reinterpret_cast<const NLCustomImageEndpointResponse*>(
               &_NLCustomImageEndpointResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(NLCustomImageEndpointResponse* other);
  friend void swap(NLCustomImageEndpointResponse& a, NLCustomImageEndpointResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NLCustomImageEndpointResponse* New() const final {
    return CreateMaybeMessage<NLCustomImageEndpointResponse>(nullptr);
  }

  NLCustomImageEndpointResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NLCustomImageEndpointResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NLCustomImageEndpointResponse& from);
  void MergeFrom(const NLCustomImageEndpointResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NLCustomImageEndpointResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NLCustomImageEndpointResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_image_2eproto);
    return ::descriptor_table_image_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NLImage image = 1;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const ::NLImage& image() const;
  ::NLImage* release_image();
  ::NLImage* mutable_image();
  void set_allocated_image(::NLImage* image);

  // @@protoc_insertion_point(class_scope:NLCustomImageEndpointResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::NLImage* image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_image_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NLImage

// int32 color = 1;
inline void NLImage::clear_color() {
  color_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NLImage::color() const {
  // @@protoc_insertion_point(field_get:NLImage.color)
  return color_;
}
inline void NLImage::set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:NLImage.color)
}

// bytes data = 2;
inline void NLImage::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NLImage::data() const {
  // @@protoc_insertion_point(field_get:NLImage.data)
  return data_.GetNoArena();
}
inline void NLImage::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NLImage.data)
}
inline void NLImage::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NLImage.data)
}
inline void NLImage::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NLImage.data)
}
inline void NLImage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NLImage.data)
}
inline std::string* NLImage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:NLImage.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NLImage::release_data() {
  // @@protoc_insertion_point(field_release:NLImage.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NLImage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:NLImage.data)
}

// int32 width = 3;
inline void NLImage::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NLImage::width() const {
  // @@protoc_insertion_point(field_get:NLImage.width)
  return width_;
}
inline void NLImage::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:NLImage.width)
}

// int32 height = 4;
inline void NLImage::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NLImage::height() const {
  // @@protoc_insertion_point(field_get:NLImage.height)
  return height_;
}
inline void NLImage::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:NLImage.height)
}

// -------------------------------------------------------------------

// NLImageRotateRequest

// .NLImageRotateRequest.Rotation rotation = 1;
inline void NLImageRotateRequest::clear_rotation() {
  rotation_ = 0;
}
inline ::NLImageRotateRequest_Rotation NLImageRotateRequest::rotation() const {
  // @@protoc_insertion_point(field_get:NLImageRotateRequest.rotation)
  return static_cast< ::NLImageRotateRequest_Rotation >(rotation_);
}
inline void NLImageRotateRequest::set_rotation(::NLImageRotateRequest_Rotation value) {
  
  rotation_ = value;
  // @@protoc_insertion_point(field_set:NLImageRotateRequest.rotation)
}

// .NLImage image = 2;
inline bool NLImageRotateRequest::has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline void NLImageRotateRequest::clear_image() {
  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::NLImage& NLImageRotateRequest::image() const {
  const ::NLImage* p = image_;
  // @@protoc_insertion_point(field_get:NLImageRotateRequest.image)
  return p != nullptr ? *p : *reinterpret_cast<const ::NLImage*>(
      &::_NLImage_default_instance_);
}
inline ::NLImage* NLImageRotateRequest::release_image() {
  // @@protoc_insertion_point(field_release:NLImageRotateRequest.image)
  
  ::NLImage* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::NLImage* NLImageRotateRequest::mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::NLImage>(GetArenaNoVirtual());
    image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NLImageRotateRequest.image)
  return image_;
}
inline void NLImageRotateRequest::set_allocated_image(::NLImage* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:NLImageRotateRequest.image)
}

// -------------------------------------------------------------------

// NLCustomImageEndpointRequest

// .NLImage image = 1;
inline bool NLCustomImageEndpointRequest::has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline void NLCustomImageEndpointRequest::clear_image() {
  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::NLImage& NLCustomImageEndpointRequest::image() const {
  const ::NLImage* p = image_;
  // @@protoc_insertion_point(field_get:NLCustomImageEndpointRequest.image)
  return p != nullptr ? *p : *reinterpret_cast<const ::NLImage*>(
      &::_NLImage_default_instance_);
}
inline ::NLImage* NLCustomImageEndpointRequest::release_image() {
  // @@protoc_insertion_point(field_release:NLCustomImageEndpointRequest.image)
  
  ::NLImage* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::NLImage* NLCustomImageEndpointRequest::mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::NLImage>(GetArenaNoVirtual());
    image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NLCustomImageEndpointRequest.image)
  return image_;
}
inline void NLCustomImageEndpointRequest::set_allocated_image(::NLImage* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:NLCustomImageEndpointRequest.image)
}

// -------------------------------------------------------------------

// NLCustomImageEndpointResponse

// .NLImage image = 1;
inline bool NLCustomImageEndpointResponse::has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline void NLCustomImageEndpointResponse::clear_image() {
  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::NLImage& NLCustomImageEndpointResponse::image() const {
  const ::NLImage* p = image_;
  // @@protoc_insertion_point(field_get:NLCustomImageEndpointResponse.image)
  return p != nullptr ? *p : *reinterpret_cast<const ::NLImage*>(
      &::_NLImage_default_instance_);
}
inline ::NLImage* NLCustomImageEndpointResponse::release_image() {
  // @@protoc_insertion_point(field_release:NLCustomImageEndpointResponse.image)
  
  ::NLImage* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::NLImage* NLCustomImageEndpointResponse::mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::NLImage>(GetArenaNoVirtual());
    image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NLCustomImageEndpointResponse.image)
  return image_;
}
inline void NLCustomImageEndpointResponse::set_allocated_image(::NLImage* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:NLCustomImageEndpointResponse.image)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::NLImageRotateRequest_Rotation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NLImageRotateRequest_Rotation>() {
  return ::NLImageRotateRequest_Rotation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_image_2eproto
